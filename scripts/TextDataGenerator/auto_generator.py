# Copyright 2022 Dakewe Biotech Corporation. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
import os
import random
import shutil
from glob import glob

from natsort import natsorted

FONTS_DIR_PATH = "./fonts"
DICT_PATH = "./lexicons/lexicon.txt"
OUTPUT_DIR_PATH = "./output"
ANNOTATION_NAME = "annotation.txt"
EPOCHS = 16
BATCH_SIZE = 16
MAX_LENGTH = 10
LANGUAGE = "en"
IMAGE_HEIGHT_RANGE = (30, 34)
THREAD_NUMBER = 8
EXTENSION = "jpg"
SKEW_ANGLE_RANGE = (0, 5)
BLUR_RANGE = (0, 4)
TEXT_COLOR = "#000000"
MARGINS = (10, 10, 10, 10)
BACKGROUND_IMAGE_DIR_PATH = "./background_images"


class TextDataGenerator:
    """Character image data generator

    Attributes:
        fonts_dir_path (str): directory address containing font files, usually under `./fonts/custom`
        dict_path (str): The address of a dictionary file containing random combinations of fonts, usually `./dicts/custom.txt`
        output_dir_path (str): character image data output directory, if set to `./output` , then in `output` under the `auto_generator.py` file directory
        epochs (int): how many times to execute the `TextDataGenerator` function
        batch_size (int): how many character images each `TextDataGenerator` function generates
        language (str): character language, en(English), es(Spanish), de(German), ar(Arabic), cn(Chinese)
        max_length (int): The maximum length of the generated character, if the character is `20201111`, it is set to 8, but for robustness, it is usually set to len(max_length) + 2
        image_height_range (tuple): The height range of the generated character image, for example (80,140), please try to keep it around 128
        thread_number (int): defines the number of threads used for image generation
        extension (str): defines the extension used to save the image
        skew_angle_range (tuple): defines the skew angle range value of the generated text
        blur_range (tuple): defines the Gaussian blur range value for the generated text
        text_color (str): defines the color of the text, should be a single hex color or a range in ?,? format
        margins (tuple): Defines the margins around the text when rendering. in pixels
        background_image_dir_path (str): defines the image directory to use when the background is set to an image

        """

    def __init__(self,
                 fonts_dir_path: str,
                 dict_path: str,
                 output_dir_path: str,
                 epochs: int,
                 batch_size: int,
                 language: str,
                 max_length: int,
                 image_height_range: tuple,
                 thread_number: int,
                 extension: str,
                 skew_angle_range: tuple,
                 blur_range: tuple,
                 text_color: str,
                 margins: tuple,
                 background_image_dir_path: str):
        self.fonts_dir_path = fonts_dir_path
        self.dict_path = dict_path
        self.output_dir_path = output_dir_path
        self.epochs = epochs
        self.batch_size = batch_size
        self.language = language
        self.max_length = max_length
        self.image_height_range = image_height_range
        self.thread_number = thread_number
        self.extension = extension
        self.skew_angle_range = skew_angle_range
        self.blur_range = blur_range
        self.text_color = text_color
        self.margins = margins
        self.background_image_dir_path = background_image_dir_path

    def gen_images(self):
        """Generate character image main function"""
        # delete old folder
        if os.path.exists(OUTPUT_DIR_PATH):
            shutil.rmtree(OUTPUT_DIR_PATH)

        # load font
        fonts = os.path.join(self.fonts_dir_path, random.choice(os.listdir(self.fonts_dir_path)))

        # Iteratively generate character image data
        for epoch in range(self.epochs):
            print(f"Generate the [{epoch + 1}/{self.epochs}] round of image data")
            # The data generated by each Epoch is placed in a different folder
            current_output_dir_path = os.path.join(self.output_dir_path, f"{epoch:05d}")

            # For details, please call `trdg -h` to view the command details
            os.system(f"trdg "
                      f"-i {self.dict_path} "
                      f"-c {self.batch_size} "
                      f"-f {random.randint(min(self.image_height_range), max(self.image_height_range))} "
                      f"-t {self.thread_number} "
                      f"-e {self.extension} "
                      f"-k {random.randint(min(self.skew_angle_range), max(self.skew_angle_range))} "
                      f"-rk "
                      f"-bl {random.randint(min(self.blur_range), max(self.blur_range))} "
                      f"-b 3 "  # Use special background as text carrier
                      f"-na 1 "
                      f"-tc {self.text_color} "
                      f"-m {random.randint(0, self.margins[0])},{random.randint(0, self.margins[1])},{random.randint(0, self.margins[2])},{random.randint(0, self.margins[3])} "
                      f"-fi "
                      f"-ft {fonts} "
                      f"-id {self.background_image_dir_path} "
                      f"--output_dir {current_output_dir_path}")

    @staticmethod
    def process_annotations():
        print(f"Annotate all images")
        # Load label file data
        annotation_list = []
        with open(DICT_PATH, "r") as df:
            for line in df.readlines():
                line = line.strip("\n")  # delete `\n`
                annotation_list.append(line)

        # get all file names
        all_files = natsorted(glob(f"{OUTPUT_DIR_PATH}/*/*.{EXTENSION}"))

        # Make sure that the files written to the labels meet the requirements for how the dataset is read
        with open(os.path.join(OUTPUT_DIR_PATH, ANNOTATION_NAME), "w+") as af:
            total_files = len(all_files)
            for index in range(total_files):
                print(f"Process: `{all_files[index]}` "
                      f"[{index + 1}/{total_files}]({(index + 1) / total_files * 100:.2f}%)")
                all_files[index] = "./" + all_files[index].replace("\\", "/")[len(OUTPUT_DIR_PATH) + 1:]
                text = f"{all_files[index]} {os.path.basename(all_files[index]).split('_')[1][:-len(EXTENSION) - 1]}"
                # No line breaks are required at the end of the data
                if index != total_files - 1:
                    text += "\n"
                af.write(text)

if __name__ == "__main__":
    text_data_generator = TextDataGenerator(fonts_dir_path=FONTS_DIR_PATH,
                                            dict_path=DICT_PATH,
                                            output_dir_path=OUTPUT_DIR_PATH,
                                            epochs=EPOCHS,
                                            batch_size=BATCH_SIZE,
                                            language=LANGUAGE,
                                            max_length=MAX_LENGTH,
                                            image_height_range=IMAGE_HEIGHT_RANGE,
                                            thread_number=THREAD_NUMBER,
                                            extension=EXTENSION,
                                            skew_angle_range=SKEW_ANGLE_RANGE,
                                            blur_range=BLUR_RANGE,
                                            text_color=TEXT_COLOR,
                                            margins=MARGINS,
                                            background_image_dir_path=BACKGROUND_IMAGE_DIR_PATH)
    text_data_generator.gen_images()
    text_data_generator.process_annotations()
